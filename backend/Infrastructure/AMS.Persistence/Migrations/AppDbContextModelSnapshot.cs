// <auto-generated />
using System;
using AMS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMS.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AMS.Doman.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("GuestEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("0-Pending, 1-Confirmed, 2-Completed, 3-Cancelled");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDate")
                        .HasDatabaseName("IX_Appointment_Date");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateOnly(2025, 1, 5),
                            CreatedDate = new DateTime(2023, 12, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            EndTime = new TimeOnly(10, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(9, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateOnly(2025, 1, 10),
                            CreatedDate = new DateTime(2023, 12, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            EndTime = new TimeOnly(15, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(14, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateOnly(2025, 1, 15),
                            CreatedDate = new DateTime(2023, 12, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            EndTime = new TimeOnly(11, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(10, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateOnly(2025, 1, 20),
                            CreatedDate = new DateTime(2023, 12, 18, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            EndTime = new TimeOnly(14, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(13, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateOnly(2025, 2, 2),
                            CreatedDate = new DateTime(2025, 1, 5, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 7,
                            EndTime = new TimeOnly(9, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(8, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDate = new DateOnly(2025, 2, 7),
                            CreatedDate = new DateTime(2025, 1, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 8,
                            EndTime = new TimeOnly(12, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(11, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 7,
                            AppointmentDate = new DateOnly(2025, 5, 14),
                            CreatedDate = new DateTime(2025, 1, 15, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 9,
                            EndTime = new TimeOnly(15, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(14, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            AppointmentDate = new DateOnly(2025, 2, 21),
                            CreatedDate = new DateTime(2025, 1, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            EndTime = new TimeOnly(10, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(9, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 9,
                            AppointmentDate = new DateOnly(2025, 3, 1),
                            CreatedDate = new DateTime(2025, 2, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 11,
                            EndTime = new TimeOnly(11, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(10, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 10,
                            AppointmentDate = new DateOnly(2025, 3, 8),
                            CreatedDate = new DateTime(2025, 2, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 12,
                            EndTime = new TimeOnly(15, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(14, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 11,
                            AppointmentDate = new DateOnly(2025, 3, 15),
                            CreatedDate = new DateTime(2025, 2, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 13,
                            EndTime = new TimeOnly(9, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(8, 0, 0),
                            Status = 2
                        },
                        new
                        {
                            Id = 12,
                            AppointmentDate = new DateOnly(2025, 3, 22),
                            CreatedDate = new DateTime(2025, 2, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 14,
                            EndTime = new TimeOnly(13, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(12, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            AppointmentDate = new DateOnly(2025, 4, 15),
                            CreatedDate = new DateTime(2025, 3, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 17,
                            EndTime = new TimeOnly(13, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(12, 0, 0),
                            Status = 3
                        },
                        new
                        {
                            Id = 16,
                            AppointmentDate = new DateOnly(2025, 4, 20),
                            CreatedDate = new DateTime(2025, 3, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 18,
                            EndTime = new TimeOnly(17, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(16, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            AppointmentDate = new DateOnly(2025, 5, 3),
                            CreatedDate = new DateTime(2025, 4, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 18,
                            EndTime = new TimeOnly(11, 0, 0),
                            PatientId = 30,
                            StartTime = new TimeOnly(10, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            AppointmentDate = new DateOnly(2025, 5, 10),
                            CreatedDate = new DateTime(2025, 4, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 20,
                            EndTime = new TimeOnly(15, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(14, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            AppointmentDate = new DateOnly(2025, 5, 20),
                            CreatedDate = new DateTime(2025, 4, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            EndTime = new TimeOnly(9, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(8, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            AppointmentDate = new DateOnly(2025, 5, 24),
                            CreatedDate = new DateTime(2025, 4, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            EndTime = new TimeOnly(13, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(12, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 21,
                            AppointmentDate = new DateOnly(2025, 4, 20),
                            CreatedDate = new DateTime(2025, 3, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 18,
                            EndTime = new TimeOnly(18, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(17, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 22,
                            AppointmentDate = new DateOnly(2025, 5, 24),
                            CreatedDate = new DateTime(2025, 4, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            EndTime = new TimeOnly(18, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(17, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 23,
                            AppointmentDate = new DateOnly(2025, 5, 24),
                            CreatedDate = new DateTime(2025, 4, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            EndTime = new TimeOnly(21, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(20, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            AppointmentDate = new DateOnly(2025, 5, 10),
                            CreatedDate = new DateTime(2025, 4, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 20,
                            EndTime = new TimeOnly(16, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(15, 0, 0),
                            Status = 3
                        },
                        new
                        {
                            Id = 25,
                            AppointmentDate = new DateOnly(2025, 4, 13),
                            CreatedDate = new DateTime(2025, 4, 9, 22, 31, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 11,
                            EndTime = new TimeOnly(21, 0, 0),
                            PatientId = 29,
                            StartTime = new TimeOnly(20, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 26,
                            AppointmentDate = new DateOnly(2025, 4, 12),
                            CreatedDate = new DateTime(2025, 4, 9, 22, 33, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            EndTime = new TimeOnly(23, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(22, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 28,
                            AppointmentDate = new DateOnly(2025, 4, 13),
                            CreatedDate = new DateTime(2025, 4, 10, 0, 54, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 9,
                            EndTime = new TimeOnly(7, 0, 0),
                            PatientId = 30,
                            StartTime = new TimeOnly(6, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 29,
                            AppointmentDate = new DateOnly(2025, 4, 12),
                            CreatedDate = new DateTime(2025, 4, 10, 0, 55, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            EndTime = new TimeOnly(6, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(5, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            AppointmentDate = new DateOnly(2025, 4, 11),
                            CreatedDate = new DateTime(2025, 4, 10, 11, 54, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 12,
                            EndTime = new TimeOnly(15, 0, 0),
                            PatientId = 21,
                            StartTime = new TimeOnly(14, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 31,
                            AppointmentDate = new DateOnly(2025, 4, 13),
                            CreatedDate = new DateTime(2025, 4, 10, 14, 40, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            EndTime = new TimeOnly(16, 0, 0),
                            GuestEmail = "amdsf@gmai.lcom",
                            StartTime = new TimeOnly(15, 0, 0),
                            Status = 1
                        },
                        new
                        {
                            Id = 32,
                            AppointmentDate = new DateOnly(2025, 4, 12),
                            CreatedDate = new DateTime(2025, 4, 10, 14, 41, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            EndTime = new TimeOnly(16, 0, 0),
                            GuestEmail = "Ahmed123@gmail.com",
                            StartTime = new TimeOnly(15, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 33,
                            AppointmentDate = new DateOnly(2025, 4, 11),
                            CreatedDate = new DateTime(2025, 4, 10, 17, 52, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            EndTime = new TimeOnly(13, 0, 0),
                            GuestEmail = "amdsf@gmai.lcom",
                            StartTime = new TimeOnly(12, 0, 0),
                            Status = 0
                        },
                        new
                        {
                            Id = 34,
                            AppointmentDate = new DateOnly(2025, 4, 13),
                            CreatedDate = new DateTime(2025, 4, 10, 19, 4, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            EndTime = new TimeOnly(13, 0, 0),
                            PatientId = 28,
                            StartTime = new TimeOnly(12, 0, 0),
                            Status = 0
                        });
                });

            modelBuilder.Entity("AMS.Doman.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AMS.Doman.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Patient"
                        });
                });

            modelBuilder.Entity("AMS.Doman.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Paediatrician"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Internal Medicine Physician"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gynaecologist"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cardiologist"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dermatologist"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Neurologist"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Psychiatrist"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Gastroenterologist"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ophthalmologist"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pulmonologist"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Nephrologist"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Dentist"
                        });
                });

            modelBuilder.Entity("AMS.Doman.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin1@gmail.com",
                            FirstName = "Ahmed",
                            LastName = "Magdy",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin2@gmail.com",
                            FirstName = "Mosa",
                            LastName = "Ali",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710"
                        });
                });

            modelBuilder.Entity("AMS.Doman.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            RoleId = 2,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            RoleId = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            RoleId = 2,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            RoleId = 2,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            RoleId = 2,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            RoleId = 2,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            RoleId = 2,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            RoleId = 2,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            RoleId = 2,
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            RoleId = 2,
                            UserId = 16
                        },
                        new
                        {
                            Id = 17,
                            RoleId = 2,
                            UserId = 17
                        },
                        new
                        {
                            Id = 18,
                            RoleId = 2,
                            UserId = 18
                        },
                        new
                        {
                            Id = 19,
                            RoleId = 2,
                            UserId = 19
                        },
                        new
                        {
                            Id = 20,
                            RoleId = 2,
                            UserId = 20
                        },
                        new
                        {
                            Id = 21,
                            RoleId = 3,
                            UserId = 21
                        },
                        new
                        {
                            Id = 25,
                            RoleId = 3,
                            UserId = 21
                        },
                        new
                        {
                            Id = 27,
                            RoleId = 3,
                            UserId = 21
                        },
                        new
                        {
                            Id = 28,
                            RoleId = 3,
                            UserId = 21
                        },
                        new
                        {
                            Id = 29,
                            RoleId = 3,
                            UserId = 21
                        },
                        new
                        {
                            Id = 30,
                            RoleId = 3,
                            UserId = 21
                        },
                        new
                        {
                            Id = 32,
                            RoleId = 3,
                            UserId = 21
                        });
                });

            modelBuilder.Entity("AMS.Doman.Entities.Doctor", b =>
                {
                    b.HasBaseType("AMS.Doman.Entities.User");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe1@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "janesmith1@gmail.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "alicejohnson@gmail.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "bobbrown@gmail.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "caroldavis@gmail.com",
                            FirstName = "Carol",
                            LastName = "Davis",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "davidwilson@gmail.com",
                            FirstName = "David",
                            LastName = "Wilson",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "evemartinez@gmail.com",
                            FirstName = "Eve",
                            LastName = "Martinez",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "frankgarcia@gmail.com",
                            FirstName = "Frank",
                            LastName = "Garcia",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "gracerodriguez@gmail.com",
                            FirstName = "Grace",
                            LastName = "Rodriguez",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "hanklee@gmail.com",
                            FirstName = "Hank",
                            LastName = "Lee",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "ivywalker@gmail.com",
                            FirstName = "Ivy",
                            LastName = "Walker",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "jackhall@gmail.com",
                            FirstName = "Jack",
                            LastName = "Hall",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "kathyallen@gmail.com",
                            FirstName = "Kathy",
                            LastName = "Allen",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "leoyoung@gmail.com",
                            FirstName = "Leo",
                            LastName = "Young",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 9
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "miahernandez@gmail.com",
                            FirstName = "Mia",
                            LastName = "Hernandez",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 10
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "ninaking@gmail.com",
                            FirstName = "Nina",
                            LastName = "King",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 11
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "oscarwright@gmail.com",
                            FirstName = "Oscar",
                            LastName = "Wright",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 11
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "paullopez@gmail.com",
                            FirstName = "Paul",
                            LastName = "Lopez",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            SpecializationId = 12
                        });
                });

            modelBuilder.Entity("AMS.Doman.Entities.Patient", b =>
                {
                    b.HasBaseType("AMS.Doman.Entities.User");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("0-Male, 1-Female");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2025, 4, 7, 3, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient@gmail.com",
                            FirstName = "Ahmed",
                            LastName = "Magdy",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            BirthDate = new DateOnly(2001, 10, 25),
                            Gender = 0
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2025, 4, 10, 5, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.smith@example.com",
                            FirstName = "John",
                            LastName = "Smith",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            BirthDate = new DateOnly(1985, 7, 15),
                            Gender = 0
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2025, 4, 10, 5, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "michael.w@example.com",
                            FirstName = "Michael",
                            LastName = "Williams",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            BirthDate = new DateOnly(1978, 11, 5),
                            Gender = 0
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2025, 4, 10, 5, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "sarah.b@example.com",
                            FirstName = "Sarah",
                            LastName = "Brown",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            BirthDate = new DateOnly(1995, 9, 18),
                            Gender = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2025, 4, 10, 5, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "davidz.m@example.com",
                            FirstName = "David",
                            LastName = "Millerz",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            BirthDate = new DateOnly(2007, 4, 10),
                            Gender = 0
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2025, 4, 10, 8, 22, 0, 0, DateTimeKind.Unspecified),
                            Email = "am234@gmail.com",
                            FirstName = "Ahmed",
                            LastName = "Ali2",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            BirthDate = new DateOnly(2007, 4, 10),
                            Gender = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2025, 4, 10, 17, 2, 0, 0, DateTimeKind.Unspecified),
                            Email = "p2@gmail.com",
                            FirstName = "Davidz",
                            LastName = "Ali",
                            PasswordHash = "ecf05f2b3a014fe7a5c2c689ffb454cfeccad80d1502138e6cabdd831a031710",
                            BirthDate = new DateOnly(2007, 4, 10),
                            Gender = 0
                        });
                });

            modelBuilder.Entity("AMS.Doman.Entities.Appointment", b =>
                {
                    b.HasOne("AMS.Doman.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AMS.Doman.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AMS.Doman.Entities.RefreshToken", b =>
                {
                    b.HasOne("AMS.Doman.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AMS.Doman.Entities.UserRole", b =>
                {
                    b.HasOne("AMS.Doman.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Doman.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AMS.Doman.Entities.Doctor", b =>
                {
                    b.HasOne("AMS.Doman.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("AMS.Doman.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Doman.Entities.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("AMS.Doman.Entities.Patient", b =>
                {
                    b.HasOne("AMS.Doman.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("AMS.Doman.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AMS.Doman.Entities.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("AMS.Doman.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("AMS.Doman.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
